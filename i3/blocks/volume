#!/bin/zsh

function toggleDevice(){
  amixer --q --card 0 sset $1 toggle
  # amixer BUG: Master is toggled aswell. Unmute manually
  amixer --q --card 0 sset Master unmute
}

function setVolume(){
  amixer --q --card 0 sset $1 $2
}

function deviceIsAvailable(){
  amixer --quiet --card 0 sget $1 
  [[ "$?" != "0" ]] && echo 'false' || echo 'true'
}

function getDeviceVolume(){
  vol=$(amixer -c 0 sget $1 | awk '/Front Left:/ { print $5 }' | tr -d '[]%')
  printf '%.2Xh' $vol
}

function deviceIsActive(){
  state=$(amixer -c 0 sget $1 | awk '/Front Left:/ { print $7 }' | tr -d '[]')
  [[ "on" == "$state" ]] && echo 'true' || echo 'false'
}

if [[ "$#" == "0" ]]; then

  # Device-Symbol pairs. Symbols use pango.
  declare -A dict=( \
    Headphone '<span font="FontAwesome 17">&#xf025;</span>' \
    Speaker   ' <span font="FontAwesome 17">&#xf028;</span>' \
  )

  for device in ${(k)dict}; do
    symbol=$dict[$device]
    if [[ "$(deviceIsAvailable $device)" == "true" ]]; then
      echo -n "$symbol "
      [[ "$(deviceIsActive $device)" == "true" ]] && echo -n "$(getDeviceVolume $device)" || echo -n "off"
    fi
  done
  exit 0
fi

case "$1" in
  toggle)
    shift
    toggleDevice $1
    pkill --signal SIGRTMIN+10 i3blocks
    ;;
  set)
    shift
    setVolume $@
    pkill --signal SIGRTMIN+10 i3blocks
    ;;
esac
