#!/usr/bin/env sh

usage() {
  name="$(basename "$0")"
  printf "\
Preview control for images. Usage:

\033[1m$name preview [-n NAME] COMMAND\033[0m

  Control preview sessions. Use \033[4mNAME\033[0m to distinguish between
  different preview sessions. If no name is provided 'default' is used.
  Commands:

    \033[1;3minit [\033[4mIMAGE\033[0m\033[1;3m]\033[0m
      Initialize a preview session. If \033[4mIMAGE\033[0m is provided the
      preview window is visible by default and is hidden otherwise.

    \033[1;3mload \033[4mIMAGE\033[0m
      Change image to preview to \033[4mIMAGE\033[0m.

    \033[1;3mshow\033[0m
      Make preview window visible if hidden.

    \033[1;3mhide\033[0m
      Hide preview window if visible.

    \033[1;3mkill\033[0m
      Kill preview and remove runtime data.

    \033[1;3minfo\033[0m
      Retrieve information about a session. Format: <NAME> <PID> <WID>.

    \033[1;3mgeometry GEOMETRY\033[0m
      Set window geometry; Not yet implemented.

\033[1m$name list\033[0m

  List names of all preview sessions.

\033[1m$name killall\033[0m

  Kill all running sessions.
"
}

dbg() {
  echo "$@" > /dev/pts/3
}

echoerr() {
  printf "\e[31;1m%s\e[0m\n" "$*" >&2;
}

# Die ungracefully with error message
die() {
  echoerr "$@"
  exit 1
}

# Returns 0 iff $1 is infix of $2 or v.v.
isprefix() {
  [ ! "$#" -eq 2 ] && return 1
  [ "$(echo "$1" | grep -o "$2")" = "$2" ] || \
    [ "$(echo "$2" | grep -o "$1")" = "$1" ] || return 1
  return 0
}


### Interface

# List running sessions by name.
list() {
  if [ -d "$cachedir" ]; then
    find "$cachedir" -mindepth 1 -maxdepth 1 -type d -printf '%f\n'
  fi
}

# Kill all running sessions.
killall() {
  list | while read name; do
    $0 preview -n "$name" kill
  done
  rm -r "$cachedir"
}


### Interface to sxiv

# Start instance of sxiv and hides the window unless an image path is provided,
# in which case the image is displayed right away.
_init() {
  [ -d "$cachedir" ] || mkdir -p "$cachedir"
  # check name for matches _and_ prefixes (see todo below)
  find "$cachedir" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' |
    grep -qF "$NAME" && die "Name is taken or a prefix. Abort."
  mkdir "$cachedir/$NAME"

  # create dummy image to make sxiv happy if no img path is provided
  if [ -f "$1" ]; then
    _load "$1"
  else
    convert -size 32x32 xc:white "$cachedir/$NAME/img.png"
    mv "$cachedir/$NAME/img.png" "$cachedir/$NAME/img"
  fi

  # TODO(fix): Use sxiv's _NET_WM_PID metadata to retrieve win id
  #   `xdotool search --pid <PID>' can be used to retrieve a window's process id
  #   if the application sets the _NET_WM_PID property, which sxiv currently
  #   does not. Issue #398 has a pending merge request implementing the feature.
  #
  #   In the meanwhile, set the class name via sxiv -N to a uniquely retrievable
  #   value and find the win id via `xdotool search --classname <NAME>'. Note
  #   that class names match any supersets (i.e. 'default' is equiv to
  #   'defaultfoo').
  cur_wid=$(xdotool getactivewindow)
  sxiv -b -N "$wmname_prefix$NAME" "$cachedir/$NAME/img" &
  pid=$!

  # Wait for window to open and check whether sxiv is alive. We might have
  # fatfingered the image path in which case sxiv will never open a window.
  while ! wid=$(xdotool search --classname "$wmname_prefix$NAME"); do
    if ! kill -0 "$pid" 2>/dev/null; then
      _kill 2>/dev/null
      die "Could not open image. Abort."
    fi
  done
  # hide the window if not image path was provided
  [ -z "$1" ] && xdotool windowunmap "$wid"
  xdotool windowactivate $cur_wid
  echo $wid > "$cachedir/$NAME/wid"
  echo $pid > "$cachedir/$NAME/pid"
}

# Set window geometry
_geometry() {
  __checkfatal
  echo TODO
}

# Load image file in sxiv. Doesn't change visibility of window
_load() {
  __checkfatal
  # TODO(perf): Hot-reload without copy-to-disk
  #   Is there any better way to use sxiv's live reload feature?
  #   Libnotify (apparently) does not react to symlinks.
  #   Idea: At least copy to a ramfs instead of writing to disk.
  cp "$1" "$cachedir/$NAME/img"
}

# Show sxiv if hidden. Idempotent.
_show() {
  __checkfatal
  cur_wid=$(xdotool getactivewindow)
  xdotool windowmap $(_wid)
  sleep 0.5
  xdotool windowactivate $cur_wid
}

# Hide sxiv if visible. Idempotent.
_hide() {
  __checkfatal
  xdotool windowunmap $(_wid)
}

# Kill instance $NAME and rm its cachedir
_kill() {
  __checkfatal
  kill $(_info | cut -d ' ' -f 2) > /dev/null 2>&1
  rm -r "$cachedir/$NAME"
}

# Retrieve information about instance $NAME. Format is <NAME> <PID> <WID>
_info() {
  __checkfatal
  pid=$(cat "$cachedir/$NAME/pid")
  wid=$(_wid)
  echo "$NAME $pid $wid"
}

# Retrieve window ID
_wid() {
  __checkfatal
  cat "$cachedir/$NAME/wid"
}

# Die immediately if session $NAME does not exist. Might be sensible to make
# this check conditional if performance issues arise.
__checkfatal() {
  [ ! -d "$cachedir/$NAME" ] && die "No such session '$NAME'. Abort."
}

## Settings:
cachedir=/tmp/imgpreview/ # where to store session info
wmname_prefix=sxiv-float- # WM_CLASSNAME prefix, to which $NAME is appended

## Global variables:

# String to dinstinguish between mulitiple preview sessions. Set by the
# `-n NAME' flag during invokation.
NAME=default

case "$1" in
  -h|--help|-\?)
    usage
    ;;
  preview)
    shift
    [ "$1" = "-n" ] && NAME="$2" && shift 2
    "_$@"
    ;;
  *)
    "$@"
    ;;
esac

# TODO(fix): Revealed window are always shown on the active screen.
#   When focus changes to a different screen between a `hide' and a `show'
#   the window wanders between screens.
#
# TODO(feat): Further doc.
